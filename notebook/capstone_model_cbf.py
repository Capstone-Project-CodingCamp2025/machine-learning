# -*- coding: utf-8 -*-
"""Capstone-Model-CBF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gDSLY49FzT35fym3kfHObvp-oLYPI6K7

# **1. Import library**
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import NearestNeighbors
from scipy.sparse import hstack
import pickle
import matplotlib.pyplot as plt
import seaborn as sns

"""# **2. Load Dataset**"""

df = pd.read_excel('all_data.xlsx')

"""# **3. Data Wrangling**

## 3.1. Statistics Descriptive
"""

# Ringkasan data
df.info()

df.describe()

"""## 3.2. Handling Missing Value"""

# Hapus baris dengan thumbnail kosong karena gambar penting untuk ditampilkan
df = df.dropna(subset=['rating', 'jumlah_ulasan', 'thumbnail'])

# Pastikan kolom numerik tidak ada NaN
df[['rating', 'jumlah_ulasan']] = df[['rating', 'jumlah_ulasan']].fillna(0)

# Buat kolom gabungan konten
df['content'] = df['kategori'] + ' ' + df['alamat']

"""# **4. Exploratory Data Analysis (EDA)**

## 4.1. Distribusi Rating
"""

plt.figure(figsize=(10, 5))
sns.histplot(df['rating'], bins=20, kde=True)
plt.title('Distribusi Rating Tempat Wisata')
plt.xlabel('Rating')
plt.ylabel('Jumlah Tempat')
plt.show()

"""## 4.2. Boxplot Jumlah Ulasan

"""

plt.figure(figsize=(10, 5))
sns.boxplot(x=df['jumlah_ulasan'])
plt.title('Boxplot Jumlah Ulasan')
plt.xlabel('Jumlah Ulasan')
plt.show()

"""## 4.3. Korelasi antar fitur numerik"""

plt.figure(figsize=(8, 5))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Korelasi Antar Fitur')
plt.show()

"""# **5. Preprocessing**"""

tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(df['content'])

"""# **6. Normalisasi**"""

scaler = MinMaxScaler()
numerical_features = scaler.fit_transform(df[['rating', 'jumlah_ulasan']])

"""# **7. Penggabungan Fitur**"""

item_features = hstack([tfidf_matrix, numerical_features])

"""# **9. Latih Model**"""

nbrs = NearestNeighbors(metric='cosine', algorithm='brute')
nbrs.fit(item_features)

np.save('item_features.npy', item_features.toarray())
with open('cbf_nbrs.pkl', 'wb') as f:
    pickle.dump(nbrs, f)

print("âœ… Model CBF berhasil dibuat dan disimpan.")

import json

# Konversi item_features ke list (pastikan .toarray() jika sparse matrix)
item_vectors = item_features.toarray().tolist()

# Simpan sebagai JSON
with open("item_features.json", "w") as f:
    json.dump(item_vectors, f)

# Simpan juga nama tempatnya
with open("item_names.json", "w") as f:
    json.dump(df['nama_tempat'].tolist(), f)